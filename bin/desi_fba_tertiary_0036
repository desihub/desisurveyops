#!/usr/bin/env python

import os
import fitsio
import numpy as np
from astropy.io import fits
from astropy.table import Table, vstack
from desiutil.log import get_logger
from desiutil.redirect import stdouterr_redirected
from desisurveyops.fba_tertiary_design_io import (
    assert_environ_settings,
    get_fn,
    read_yaml,
    assert_tertiary_settings,
    get_tile_centers_grid,
    create_tiles_table,
    creates_priority_table,
    finalize_target_table,
    assert_files,
    create_targets_assign,
    plot_targets_assign,
)
from desitarget.targetmask import desi_mask, bgs_mask
from argparse import ArgumentParser

# AR message to ensure that some key settings in the environment are correctly set
# AR put it at the very top, so that it appears first, and is not redirected
# AR    (=burried) in the log file
assert_environ_settings()

log = get_logger()


def parse():
    parser = ArgumentParser()
    parser.add_argument(
        "--yamlfn",
        help="path to the tertiary-config-PROGNUMPAD.yaml file",
        type=str,
        default=None,
    )
    parser.add_argument(
        "--steps",
        help="comma-separated list of steps to execute (default='tiles,priorities,targets,run,diagnosis')",
        type=str,
        default="tiles,priorities,targets,run,diagnosis",
    )
    parser.add_argument(
        "--dry_run",
        action="store_true",
        help="for the 'run' step, only print the commands on the prompt",
    )
    parser.add_argument(
        "--log-stdout",
        "--log_stdout",
        action="store_true",
        help="log to stdout instead of redirecting to a file",
    )
    args = parser.parse_args()
    for kwargs in args._get_kwargs():
        log.info("{} = {}".format(kwargs[0], kwargs[1]))
    return args


# AR tiles
# AR 30 tiles of 300s each
# AR 6 pointings, 5 dithered tiles per pointing
# AR pointing centers: see Ting email from 8/11/23, 3:04 PM pacific
def create_tiles(tileid_start, ntile, obsconds, outfn):
    tileids = np.arange(tileid_start, tileid_start + ntile, dtype=int)
    pointing_ras = np.array([260.481, 260.481, 258.081, 258.081, 254.781, 263.781])
    pointing_decs = np.array([42.236, 44.036, 42.236, 44.036, 43.136, 41.936])
    tileras, tiledecs = np.zeros(0, dtype=float), np.zeros(0, dtype=float)
    for pointing_ra, pointing_dec in zip(pointing_ras, pointing_decs):
        tmpras, tmpdecs = get_tile_centers_grid(pointing_ra, pointing_dec, npt=5)
        tileras = np.append(tileras, tmpras)
        tiledecs = np.append(tiledecs, tmpdecs)
    assert tileras.size == ntile
    assert tiledecs.size == ntile
    d = create_tiles_table(tileids, tileras, tiledecs, obsconds)
    d.write(outfn)



# AR usual priority scheme (+1 when observed)
# AR *except* that DONE priorities are higher than the FILLER UNOBS one
# AR see email from Ting from 8/16/23 7:15AM pacific
def create_priorities(yamlfn, outfn):
    d = creates_priority_table(yamlfn)
    # AR set DONE priorities higher than FILLER/UNOBS
    i = np.where((d["TERTIARY_TARGET"] == "FILLER") & (d["NUMOBS_DONE_MIN"] == 0))[0][0]
    filler_unobs_prio = d["PRIORITY"][i]
    for sample in np.unique(d["TERTIARY_TARGET"]):
        if sample != "FILLER":
            i = np.where((d["TERTIARY_TARGET"] == sample) & (d["NUMOBS_DONE_MAX"] == 99))[0][0]
            d["PRIORITY"][i] = filler_unobs_prio + 1
            log.info(
                "set priority={} for {} NUMOBS_DONE_MIN={} and NUMOBS_DONE_MAX={}".format(
                    d["PRIORITY"][i],
                    d["TERTIARY_TARGET"][i],
                    d["NUMOBS_DONE_MIN"][i],
                    d["NUMOBS_DONE_MAX"][i]
                )
            )
    # AR print
    d.pprint_all()
    for sample in np.unique(d["TERTIARY_TARGET"]):
        sel = d["TERTIARY_TARGET"] == sample
        log.info("priorites for {}: {}".format(sample, d["PRIORITY"][sel].tolist()))
    d.write(outfn)


# AR targets
def create_targets(yamlfn, outfn):
    # AR input cat
    targdir = read_yaml(yamlfn)["settings"]["targdir"]
    mydict = read_yaml(yamlfn)["samples"]
    samples = list(mydict.keys())
    fns = np.unique([mydict[sample]["FN"] for sample in samples])
    ds = []
    for fn in fns:
        count = 0
        d = Table(fitsio.read(os.path.join(targdir, "inputcats", fn)))
        # AR nulling header to remove random infos in there
        d.meta = None
        # AR get TERTIARY_TARGET
        d["TERTIARY_TARGET"] = np.zeros(len(d), dtype=object)
        for sample in samples:
            sel = d["SAMPLE"] == sample
            d["TERTIARY_TARGET"][sel] = sample
            count += sel.sum()
            log.info(
                "{}\t: assign {}/{} targets to {}".format(fn, sel.sum(), len(d), sample)
            )
        assert count == len(d)
        # ORIG_ROW, ORIG_FN
        d["ORIG_ROW"] = np.arange(len(d), dtype=int)
        d["ORIG_FN"] = np.array([fn for _ in d], dtype=object)
        keep_keys = [
            "RA",
            "DEC",
            "PMRA",
            "PMDEC",
            "REF_EPOCH",
            "TERTIARY_TARGET",
            "ORIG_ROW",
            "ORIG_FN",
        ]
        d = d[keep_keys]
        ds.append(d)
    d = vstack(ds)
    d["TERTIARY_TARGET"] = d["TERTIARY_TARGET"].astype(str)
    d["ORIG_FN"] = d["ORIG_FN"].astype(str)
    # AR finalize
    d = finalize_target_table(d, yamlfn)
    d.meta["RANDSEED"] = read_yaml(yamlfn)["settings"]["np_rand_seed"]
    d.write(outfn)


def main():

    # AR read + assert settings
    mydict = read_yaml(args.yamlfn)["settings"]
    assert_tertiary_settings(mydict)
    prognum, targdir = mydict["prognum"], mydict["targdir"]

    # AR set random seed (for SUBPRIORITY reproducibility)
    np.random.seed(mydict["np_rand_seed"])

    # AR tiles file
    if "tiles" in args.steps.split(","):
        tilesfn = get_fn(prognum, "tiles", targdir)
        log.info("run create_tiles() to generate {}".format(tilesfn))
        create_tiles(
            mydict["tileid_start"], mydict["ntile"], mydict["obsconds"], tilesfn
        )

    # AR priorities file
    if "priorities" in args.steps.split(","):
        priofn = get_fn(prognum, "priorities", targdir)
        log.info("run create_priorities() to generate {}".format(priofn))
        create_priorities(args.yamlfn, priofn)

    # AR targets file
    if "targets" in args.steps.split(","):
        targfn = get_fn(prognum, "targets", targdir)
        log.info("run create_targets() to generate {}".format(targfn))
        create_targets(args.yamlfn, targfn)

    # AR sanity checks + run
    if "run" in args.steps.split(","):
        assert_files(prognum, targdir)
        cmd = "desi_fba_tertiary_wrapper --prognum {} --targdir {} --rundate {} --std_dtver {}".format(
            prognum, targdir, mydict["rundate"], mydict["std_dtver"]
        )
        if args.dry_run:
            cmd = "{} --dry_run".format(cmd)
        log.info(cmd)
        os.system(cmd)

    # AR diagnosis
    if "diagnosis" in args.steps.split(","):
        create_targets_assign(prognum, targdir)
        plot_targets_assign(prognum, targdir)


if __name__ == "__main__":

    args = parse()

    if args.log_stdout:
        main()
    else:
        _ = read_yaml(args.yamlfn)["settings"]
        logfn = get_fn(_["prognum"], "log", _["targdir"])
        with stdouterr_redirected(to=logfn):
            main()
