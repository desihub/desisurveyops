#!/usr/bin/env python

import os
import fitsio
import numpy as np
from astropy.io import fits
from astropy.table import Table, vstack
from desiutil.log import get_logger
from desiutil.redirect import stdouterr_redirected
from desisurveyops.fba_tertiary_design_io import (
    assert_environ_settings,
    get_fn,
    read_yaml,
    assert_tertiary_settings,
    get_tile_centers_grid,
    create_tiles_table,
    create_empty_priority_dict,
    finalize_target_table,
    assert_files,
    create_targets_assign,
    plot_targets_assign,
)
from argparse import ArgumentParser

# AR message to ensure that some key settings in the environment are correctly set                                                                                              
# AR put it at the very top, so that it appears first, and is not redirected
# AR    (=burried) in the log file
assert_environ_settings()

log = get_logger()


def parse():
    parser = ArgumentParser()
    parser.add_argument(
        "--yamlfn",
        help="path to the tertiary-config-PROGNUMPAD.yaml file",
        type=str,
        default=None,
    )
    parser.add_argument(
        "--steps",
        help="comma-separated list of steps to execute (default='tiles,priorities,targets,run,diagnosis')",
        type=str,
        default="tiles,priorities,targets,run,diagnosis",
    )
    parser.add_argument(
        "--dry_run",
        action="store_true",
        help="for the 'run' step, only print the commands on the prompt",
    )
    parser.add_argument(
        "--log-stdout",
        "--log_stdout",
        action="store_true",
        help="log to stdout instead of redirecting to a file",
    )
    args = parser.parse_args()
    for kwargs in args._get_kwargs():
        log.info("{} = {}".format(kwargs[0], kwargs[1]))
    return args


# AR 4 locations, 6 tiles at each location
# AR email from Ting from 5/30/2023 01:36
# AR use a grid-dithering for each location
def create_tiles(tileid_start, ntile, obsconds, outfn):
    tileids = np.arange(tileid_start, tileid_start + ntile, dtype=int)
    ras = [228.2, 226.2, 229.2, 225.2]
    decs = [66.7, 67.7, 68.2, 66.2]
    #
    tileras, tiledecs = np.zeros(0), np.zeros(0)
    for ra, dec in zip(ras, decs):
        tmpras, tmpdecs = get_tile_centers_grid(ra, dec, npt=6)
        tileras = np.append(tileras, tmpras)
        tiledecs = np.append(tiledecs, tmpdecs)
    assert tileras.size == ntile
    assert tiledecs.size == ntile
    d = create_tiles_table(tileids, tileras, tiledecs, obsconds)
    d.write(outfn)


# AR email from Ting from 6/1/2023 6:41AM pacific
# AR simpler to create it manually..
def create_priorities(yamlfn, outfn):
    myd = create_empty_priority_dict()
    # AR PACE_MEM_UMI
    myd["TERTIARY_TARGET"] += [
        "PACE_MEM_UMI",
        "PACE_MEM_UMI",
        "PACE_MEM_UMI",
        "PACE_MEM_UMI",
    ]
    myd["NUMOBS_DONE_MIN"] += [0, 1, 2, 6]
    myd["NUMOBS_DONE_MAX"] += [0, 1, 5, 99]
    myd["PRIORITY"] += [5100, 5110, 5010, 5003]
    # AR BRIGHT_PM_UMI
    myd["TERTIARY_TARGET"] += [
        "BRIGHT_PM_UMI",
        "BRIGHT_PM_UMI",
        "BRIGHT_PM_UMI",
        "BRIGHT_PM_UMI",
    ]
    myd["NUMOBS_DONE_MIN"] += [0, 1, 2, 6]
    myd["NUMOBS_DONE_MAX"] += [0, 1, 5, 99]
    myd["PRIORITY"] += [5090, 5095, 5009, 5003]
    # AR OBSERVED_UMI
    myd["TERTIARY_TARGET"] += ["OBSERVED_UMI", "OBSERVED_UMI"]
    myd["NUMOBS_DONE_MIN"] += [0, 6]
    myd["NUMOBS_DONE_MAX"] += [5, 99]
    myd["PRIORITY"] += [5008, 5003]
    # AR FAINT_NOPM_UMI
    myd["TERTIARY_TARGET"] += ["FAINT_NOPM_UMI", "FAINT_NOPM_UMI"]
    myd["NUMOBS_DONE_MIN"] += [0, 18]
    myd["NUMOBS_DONE_MAX"] += [17, 99]
    myd["PRIORITY"] += [5007, 5003]
    # AR FILLER
    myd["TERTIARY_TARGET"] += ["FILLER", "FILLER"]
    myd["NUMOBS_DONE_MIN"] += [0, 1]
    myd["NUMOBS_DONE_MAX"] += [0, 99]
    myd["PRIORITY"] += [5002, 5001]
    # AR convert to Table
    d = Table()
    for key in myd:
        d[key] = myd[key]
    # AR small sanity check...
    mydict = read_yaml(yamlfn)["samples"]
    for sample in mydict:
        sel = d["TERTIARY_TARGET"] == sample
        dd = d[sel]
        assert (
            dd["PRIORITY"][dd["NUMOBS_DONE_MIN"] == 0][0]
            == mydict[sample]["PRIORITY_INIT"]
        )
        assert (
            dd["NUMOBS_DONE_MIN"][dd["NUMOBS_DONE_MAX"] == 99][0]
            == mydict[sample]["NGOAL"]
        )
    # AR print
    d.pprint_all()
    for sample in np.unique(d["TERTIARY_TARGET"]):
        sel = d["TERTIARY_TARGET"] == sample
        log.info("priorites for {}: {}".format(sample, d["PRIORITY"][sel].tolist()))
    d.write(outfn)


def create_targets(yamlfn, outfn):
    # AR input cat
    mydict = read_yaml(yamlfn)["samples"]
    assert np.unique([mydict[sample]["FN"] for sample in mydict]).size == 1
    sample = list(mydict.keys())[0]
    infn = os.path.join(os.path.dirname(outfn), "inputcats", mydict[sample]["FN"])
    # AR read + format stuff..
    d = Table(fitsio.read(infn))
    keep_keys = ["RA", "DEC", "PMRA", "PMDEC", "REF_EPOCH"]
    old_keys = ["ID", "FLUX_G", "FLUX_R", "SAMPLE"]
    new_keys = ["ORIG_ID", "ORIG_G", "ORIG_R", "TERTIARY_TARGET"]
    d = d[keep_keys + old_keys]  # AR re-order columns at the same time as selecting
    for old_key, new_key in zip(old_keys, new_keys):
        d[old_key].name = new_key
    # AR finalize
    d = finalize_target_table(d, yamlfn)
    d.meta["RANDSEED"] = read_yaml(yamlfn)["settings"]["np_rand_seed"]
    d.write(outfn)


def main():

    # AR read + assert settings
    mydict = read_yaml(args.yamlfn)["settings"]
    assert_tertiary_settings(mydict)
    prognum, targdir = mydict["prognum"], mydict["targdir"]

    # AR set random seed (for SUBPRIORITY reproducibility)
    np.random.seed(mydict["np_rand_seed"])

    # AR tiles file
    if "tiles" in args.steps.split(","):
        tilesfn = get_fn(prognum, "tiles", targdir)
        log.info("run create_tiles() to generate {}".format(tilesfn))
        create_tiles(
            mydict["tileid_start"], mydict["ntile"], mydict["obsconds"], tilesfn
        )

    # AR priorities file
    if "priorities" in args.steps.split(","):
        priofn = get_fn(prognum, "priorities", targdir)
        log.info("run create_priorities() to generate {}".format(priofn))
        create_priorities(args.yamlfn, priofn)

    # AR targets file
    if "targets" in args.steps.split(","):
        targfn = get_fn(prognum, "targets", targdir)
        log.info("run create_targets() to generate {}".format(targfn))
        create_targets(args.yamlfn, targfn)

    # AR sanity checks + run
    if "run" in args.steps.split(","):
        assert_files(prognum, targdir)
        cmd = "desi_fba_tertiary_wrapper --prognum {} --targdir {} --rundate {} --std_dtver {}".format(
            prognum, targdir, mydict["rundate"], mydict["std_dtver"]
        )
        if args.dry_run:
            cmd = "{} --dry_run".format(cmd)
        log.info(cmd)
        os.system(cmd)

    # AR diagnosis
    if "diagnosis" in args.steps.split(","):
        create_targets_assign(prognum, targdir)
        plot_targets_assign(prognum, targdir)


if __name__ == "__main__":

    args = parse()

    if args.log_stdout:
        main()
    else:
        _ = read_yaml(args.yamlfn)["settings"]
        logfn = get_fn(_["prognum"], "log", _["targdir"])
        with stdouterr_redirected(to=logfn):
            main()
