#!/usr/bin/env python

import os
from fiberassign.utils import Logger
from desisurveyops.fba_tertiary_design_io import get_fn
from desisurveyops.fba_calibration_design_io import (
    get_calibration_settings,
    get_calibration_tiles,
    get_main_primary_priorities,
    get_main_primary_targets,
    finalize_calibration_target_table,
)
from argparse import ArgumentParser

# AR https://desi.lbl.gov/trac/wiki/SurveyOps/CalibrationFields

log = Logger.get()

valid_steps = ["tiles", "priorities", "targets"]


def parse():
    parser = ArgumentParser(
        description="Creates {targdir}/tertiary-tiles-{prognumpad}.ecsv, {targdir}/tertiary-priorities-{prognumpad}.ecsv, {targdir}/tertiary-targets-{prognumpad}.fits"
    )
    parser.add_argument("--prognum", help="tertiary PROGNUM", type=int)
    parser.add_argument(
        "--targdir",
        help="output folder; for an official design, it should be $DESI_ROOT/fiberassign/special/tertiary/{prognumpad} (default=None)",
        type=str,
        default=None,
    )
    parser.add_argument(
        "--steps",
        help="comma-separated values (e.g., tiles,priorities,targets)",
        type=str,
    )
    parser.add_argument("--checker", help="checker column (e.g., AR)", type=str)
    parser.add_argument(
        "--radius",
        help="we select targets up that distance (in degree) from the field center (default=3)",
        type=float,
        default=3,
    )
    parser.add_argument(
        "--dtver",
        help="desitarget catalog version (default=1.1.1)",
        type=str,
        default="1.1.1",
    )
    args = parser.parse_args()
    # AR valid steps
    for step in args.steps.split(","):
        if step not in valid_steps:
            msg = "non-valid step = {}; exiting".format(step)
            log.error(msg)
            raise ValueError(msg)
    # AR print arguments
    for kwargs in args._get_kwargs():
        log.info("{} = {}".format(kwargs[0], kwargs[1]))
    return args


def create_tiles(program, field_ra, field_dec, tileid_start, tileid_end, outfn):
    d = get_calibration_tiles(
        program, field_ra, field_dec, tileid_start, tileid_end
    )
    d.write(outfn)


def create_priorities(program, outfn):
    d = get_main_primary_priorities(program)
    d.write(outfn)


def create_targets(prognum, program, field_ra, field_dec, radius, dtver, checker, outfn):
    # AR corner case for prognum=8...
    if prognum == 8:
        do_ignore_gcb = True
    else:
        do_ignore_gcb = False
    # AR retrieve main primary targets
    d = get_main_primary_targets(
        program,
        field_ra,
        field_dec,
        radius=radius,
        do_ignore_gcb=do_ignore_gcb,
        dtver=dtver,
    )
    # AR do all the proper formatting things
    d = finalize_calibration_target_table(
        d,
        prognum,
        program,
        checker=checker,
    )
    # AR write
    d.write(outfn)


def main():

    args = parse()

    # AR general properties
    program, field_ra, field_dec, tileid_start, tileid_end = get_calibration_settings(
        args.prognum
    )

    if "tiles" in args.steps.split(","):
        tilesfn = get_fn(args.prognum, "tiles", args.targdir)
        log.info("run create_tiles() to generate {}".format(tilesfn))
        create_tiles(
            program, field_ra, field_dec, tileid_start, tileid_end, tilesfn
        )

    if "priorities" in args.steps.split(","):
        priofn = get_fn(args.prognum, "priorities", args.targdir)
        log.info("run create_priorities() to generate {}".format(priofn))
        create_priorities(program, priofn)

    if "targets" in args.steps.split(","):
        targfn = get_fn(args.prognum, "targets", args.targdir)
        log.info("run create_targets() to generate {}".format(targfn))
        create_targets(
            args.prognum, program, field_ra, field_dec, args.radius, args.dtver, args.checker, targfn
        )


if __name__ == "__main__":
    main()
