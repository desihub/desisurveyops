#!/usr/bin/env python

import os
import fitsio
import numpy as np
from astropy.table import Table
from argparse import ArgumentParser


def parse():
    parser = ArgumentParser(description="This scripts generates the commands needed to fix corrupted intermediate fiberassign files.")
    parser.add_argument(
        "--inecsv",
        help="ecsv input file (default=Fa-Intermediate-Corrupt.ecsv, i.e. nothing written)",
        type=str,
        default='Fa-Intermediate-Corrupt.ecsv')
    args = parser.parse_args()
    return args

def main():

    args = parse()

    if not os.path.exists(args.inecsv):
        print('Please run check_fa_intermediate_corrupt first and pass the inecsv arg')
        print('i.e. /"check_fa_intermediate_corrupt --numproc 256 --outecsv Fa-Intermediate-Corrupt.ecsv --overwrite True/" ')
        return

    #read corrupted intermediary file, sort by TILEID for comparison to specstatus
    fa_int_corrupt = np.array(Table.read(args.inecsv))
    fa_int_corrupt.sort(order='TILEID')
    
    tiles_specstat = np.array(Table.read('/global/cfs/cdirs/desi/survey/ops/surveyops/trunk/ops/tiles-specstatus.ecsv'))
    #cutting to main tiles
    tiles_specstat = tiles_specstat[tiles_specstat["SURVEY"] == "main"]
    
    #i/o setup
    temp_dir = '/pscratch/sd/d/desiproc/fiberassign/rerun'
    fa_dir = os.path.join(os.getenv("DESI_ROOT"), "survey", "fiberassign", "main")
    
    print('godailyops')
    
    #determine the dates for which we need to generate new files
    redo_dates = tiles_specstat[np.isin(tiles_specstat['TILEID'],fa_int_corrupt['TILEID'])]['QANIGHT']
    
    #iterate over main survey dates
    for rd in np.unique(redo_dates[redo_dates >= 20210514]):
        print('validate_lastnight_fba --night {}'.format(rd))
    
        #iterate through entries associated with this date and print necessary commands
        for en in fa_int_corrupt[redo_dates == rd]:
            tile_str = str(en['TILEID']).zfill(6)
            cases = en['CASE'].split(',')
            for case in cases:
                origfn = os.path.join(fa_dir, tile_str[:3], "{}-{}.fits".format(tile_str, case))
                corruptfn = origfn.replace(".fits", "-corrupted.fits")
                tmpfn = origfn.replace(fa_dir, temp_dir)
                print("mv {} {}".format(origfn, corruptfn))
                print("mv {} {}".format(tmpfn, origfn))

if __name__ == "__main__":
    main()