#!/usr/bin/env python

import os
import sys
import subprocess
import argparse
import numpy as np
from astropy.table import Table
from desisurveyops.utils import get_fa_basename, get_fa_main_scndtoo_expect
from desiutil.log import get_logger


def parse(options=None):
    parser = argparse.ArgumentParser(
        description=
        "\tVerify that all *MAIN* tiles with STATUS!=unobs have the final and intermediate fiberassign products.\n"+
        "\tFinal fiberassign products being: fiberassign-TILEID.{fits.gz,png,log}.\n"+
        "\tIntermediate files being: TILEID-{tile,sky,gfa,targ}.fits and optionally TILEID-{scnd,too}.fits.\n"+
        "\tThe final files are generated at KPNO by fba-main-onthefly.sh, and svn-committed by afternoon_plan.sh.\n"+
        "\tThe intermediate files should be generated by the call to validate_lastnight_fba.",
        formatter_class=argparse.RawTextHelpFormatter,
    )
    args = None
    if options is None:
        args = parser.parse_args()
    else:
        args = parser.parse_args(options)
    return args


def main():

    log = get_logger()

    args = parse()

    # AR tiles file
    tilesfn = os.path.join(
        os.getenv("DESI_SURVEYOPS"),
        "ops",
        "tiles-main.ecsv",
    )
    # AR daily exposures (to get the nights of observations of missing files)
    expsfn = os.path.join(
        os.getenv("DESI_ROOT"),
        "spectro",
        "redux",
        "daily",
        "exposures-daily.fits",
    )
    # AR folder with intermediate products
    fa_int_dir = os.path.join(
        os.getenv("DESI_ROOT"),
        "survey",
        "fiberassign",
        "main",
    )
    # AR folder with the fiberassign svn checkout
    fa_dir = os.path.join(
        os.getenv("DESI_TARGET"),
        "fiberassign",
        "tiles",
        "trunk",
    )


    # AR fiberassign-TILEID.{fits.gz, png, log}
    fa_names = ["fafits", "fapng", "falog"]
    # AR TILEID-name.fits files
    fa_int_names = ["tiles", "sky", "gfa", "targ", "scnd", "too"]


    # AR read the tiles file
    # AR possible status values are: unobs, obsstart, obsend, done
    # AR any tile with status!=unobs should have its intermediate files
    # AR    generated by the validate_lastnight_fba call from the dailyops tasks
    if not os.path.isfile(tilesfn):
        msg = "incorrect args.survey: {} does not exist"
        log.error(msg)
        raise ValueError(msg)
    tiles = Table.read(tilesfn)
    sel = tiles["STATUS"] != "unobs"
    tiles = tiles[sel]
    ntile = len(tiles)
    log.info("Veryfing {} tiles from the MAIN survey with STATUS!=unobs".format(ntile))


    # AR table to store results
    miss = Table()
    miss["TILEID"] = tiles["TILEID"]
    for name in fa_names + fa_int_names:
        miss[name] = np.zeros(ntile, dtype=bool)
    miss["NIGHTS"] = np.array(["" for x in range(ntile)], dtype=object)


    # AR looping on tiles
    for i in range(ntile):
        tileid, program = tiles["TILEID"][i], tiles["PROGRAM"][i]
        tileid_pad = "{:06d}".format(tileid)
        # AR fiberassign* files
        for name in fa_names:
            fn = os.path.join(fa_dir, tileid_pad[:3], get_fa_basename(tileid, name))
            if not os.path.isfile(fn):
                miss[name][i] = True
        # AR do we expect scnd and too?
        # AR if no fiberassign-TILEID.log file, we conservatively assume we expect those files
        fn = os.path.join(fa_dir, tileid_pad[:3], get_fa_basename(tileid, "falog"))
        if not miss["falog"][i]:
            exp_scnd, exp_too = get_fa_main_scndtoo_expect(tileid, program, fn)
        else:
            exp_scnd, exp_too = True, True
            log.warning("missing {}: assuming we expect a TILEID-scnd.fits and a TILEID-too.fits files".format(fn))
        # AR intermediate
        for name in fa_int_names:
            fn = os.path.join(fa_int_dir, tileid_pad[:3], get_fa_basename(tileid, name))
            if not os.path.isfile(fn):
                if (
                    ((name == "scnd") & (exp_scnd))
                    |
                    ((name == "too") & (exp_too))
                    |
                    (name not in ["scnd", "too"])
                ):
                    miss[name][i] = True


    # AR tiles with some missing files
    sel_miss = np.zeros(ntile, dtype=bool)
    for name in fa_names + fa_int_names:
        sel_miss |= miss[name]


    # AR grabbing the nights for the tiles with missing files
    exps = Table.read(expsfn, "EXPOSURES")
    for i in np.where(sel_miss)[0]:
        sel = exps["TILEID"] == miss["TILEID"][i]
        miss["NIGHTS"][i] = ",".join(np.unique(exps["NIGHT"][sel]).astype(str))


    # AR reporting errors
    print("")
    print("============= MISSING FILES FOR {} TILES ===============".format(sel_miss.sum()))
    miss[sel_miss].pprint_all()
    print("=======================================================")
    print("")
    # AR summary
    for name in fa_names + fa_int_names:
        basename = get_fa_basename(1000, name).replace("001000", "TILEID")
        nmiss = miss[name].sum()
        if nmiss > 0:
            log.error("{}: missing {} files".format(basename, nmiss))
    print("")


if __name__ == "__main__":
    main()
